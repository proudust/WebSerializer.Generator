using System.Text;
using System.Text.Encodings.Web;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Proudust.Web;

[Generator(LanguageNames.CSharp)]
public sealed partial class WebSerializerGenerator : IIncrementalGenerator
{
    public const string GenerateWebSerializerAttributeFullName = "Proudust.Web.GenerateWebSerializerAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("GenerateWebSerializerAttribute.g.cs", /* lang=c#-test */ """
                using System;
                using System.Diagnostics;

                namespace Proudust.Web;

                [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
                [Conditional("COMPILE_TIME_ONLY")]
                internal sealed class GenerateWebSerializerAttribute : Attribute;
                """);
        });

        var typeDeclarations = context.SyntaxProvider.ForAttributeWithMetadataName(
            GenerateWebSerializerAttributeFullName,
            predicate: static (node, token) =>
            {
                return (node is ClassDeclarationSyntax
                                or StructDeclarationSyntax
                                or RecordDeclarationSyntax
                                or InterfaceDeclarationSyntax);
            },
            transform: static (context, token) =>
            {
                return (TypeDeclarationSyntax)context.TargetNode;
            });

        var source = typeDeclarations.Combine(context.CompilationProvider);

        context.RegisterSourceOutput(source, static (context, source) =>
        {
            var (typeDeclaration, compilation) = source;

            var semanticModel = compilation.GetSemanticModel(typeDeclaration.SyntaxTree);
            var typeSymbol = semanticModel.GetDeclaredSymbol(typeDeclaration, context.CancellationToken);
            if (typeSymbol is null)
            {
                return;
            }

            var sb = new StringBuilder();
            sb.Append(/* lang=c#-test */ """
                // <auto-generated/>

                using Cysharp.Web;

                """);

            var type = new TargetType(typeSymbol);
            if (type.Namespace is string ns)
            {
                sb.AppendLine("namespace ").Append(ns).AppendLine(";");
            }
            sb.AppendLine();

            foreach (var (typeKeyword, name) in type.Parents)
            {
                sb.AppendLine($$"""
                    partial {{typeKeyword}} {{name}}
                    {
                    """);
            }

            sb.AppendLine($$"""
                [WebSerializer(typeof({{type.Name}}WebFormatter))]
                partial {{type.TypeKeyword}} {{type.Name}}
                {
                    sealed class {{type.Name}}WebFormatter : IWebSerializer<{{type.Name}}>
                    {
                        public void Serialize(ref WebSerializerWriter writer, {{type.Name}} value, WebSerializerOptions options)
                        {
                """);

            if (type.Prefix is string prefix)
            {
                // FIXME: Double encode
                sb.Append(/* lang=c#-test */ $$"""
                        var originalNamePrefix = writer.NamePrefix;
                        if (writer.NamePrefix == null)
                        {
                            writer.NamePrefix = "{{prefix}}";
                        }
                        else
                        {
                            writer.NamePrefix = originalNamePrefix + "{{prefix}}";
                        }

                        """);
            }

            int i = 0;
            foreach (var member in type.Members)
            {
                if (member.IsNullable)
                {
                    sb.Append(/* lang=c#-test */ $$"""
                        if (value.{{member.MemberName}} is not null)
                        {

                        """);
                }

                if (0 < i)
                {
                    sb.Append(/* lang=c#-test */ """
                                    writer.AppendConcatenate();

                        """);
                }

                sb.Append($$"""
                                writer.AppendNamePrefix();
                                writer.AppendRaw("{{UrlEncoder.Default.Encode(member.SerializedName)}}=");

                    """);
                if (member.WebSerializer is null)
                {
                    sb.Append($$"""
                                options.GetRequiredSerializer<{{member.Type}}>().Serialize(ref writer, value.{{member.MemberName}}, options);

                    """);
                }
                else
                {
                    sb.Append($$"""
                                new {{member.WebSerializer}}().Serialize(ref writer, value.{{member.MemberName}}, options);

                    """);
                }

                if (member.IsNullable)
                {
                    sb.Append(/* lang=c#-test */ """
                        }

                        """);
                }

                i++;
            }

            sb.AppendLine("""
                        }
                    }
                }
                """);

            foreach (var _ in type.Parents)
            {
                sb.AppendLine($$"""
                    }
                    """);
            }

            var fullType = type.FullyQualifiedName
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");
            context.AddSource($"{fullType}.GenerateWebSerializer.g.cs", sb.ToString());
        });
    }
}
