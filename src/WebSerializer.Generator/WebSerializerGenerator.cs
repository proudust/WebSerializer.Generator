using System.Text;
using System.Text.Encodings.Web;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Proudust.Web;

[Generator(LanguageNames.CSharp)]
public sealed partial class WebSerializerGenerator : IIncrementalGenerator
{
    public const string WebSerializableAttributeFullName = "Proudust.Web.WebSerializableAttribute`1";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("WebSerializableAttribute.g.cs", /* lang=c#-test */ """
                // <auto-generated/>
                #nullable enable

                using System;
                using System.Diagnostics;

                namespace Proudust.Web;

                [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
                [Conditional("COMPILE_TIME_ONLY")]
                internal sealed class WebSerializableAttribute<T> : Attribute;
                """);
        });

        var typeDeclarations = context.SyntaxProvider.ForAttributeWithMetadataName(
            WebSerializableAttributeFullName,
            predicate: static (node, token) =>
            {
                return node is ClassDeclarationSyntax;
            },
            transform: static (context, token) =>
            {
                return (TypeDeclarationSyntax)context.TargetNode;
            });

        var source = typeDeclarations.Combine(context.CompilationProvider);

        context.RegisterSourceOutput(source, static (context, source) =>
        {
            var (typeDeclaration, compilation) = source;

            var semanticModel = compilation.GetSemanticModel(typeDeclaration.SyntaxTree);
            var typeSymbol = semanticModel.GetDeclaredSymbol(typeDeclaration, context.CancellationToken);
            if (typeSymbol is null)
            {
                return;
            }

            var sb = new StringBuilder();
            sb.Append(/* lang=c#-test */ """
                // <auto-generated/>
                #nullable enable

                using System.Runtime.CompilerServices;
                using Cysharp.Web;
                using Proudust.Web;

                """);

            var providerType = new ProviderType(typeSymbol);
            if (providerType.Namespace is string ns)
            {
                sb.Append("namespace ").Append(ns).AppendLine(";");
            }
            sb.AppendLine();

            foreach (var (typeKeyword, name) in providerType.Parents)
            {
                sb.AppendLine($$"""
                    partial {{typeKeyword}} {{name}}
                    {
                    """);
            }

            sb.AppendLine($$"""
                partial class {{providerType.Name}} : IWebSerializerProvider
                {
                    public static IWebSerializerProvider Instance { get; } = new {{providerType.Name}}();

                    {{providerType.Name}}()
                    {
                    }

                    public IWebSerializer<T>? GetSerializer<T>()
                    {
                        return Cache<T>.Serializer;
                    }

                    private static class Cache<T>
                    {
                        public static IWebSerializer<T>? Serializer = null;
                    }

                    static {{providerType.Name}}()
                    {
                """);

            foreach (var type in providerType.TargetTypes)
            {
                sb.AppendLine($$"""
                        Cache<{{type.Name}}>.Serializer = {{type.Name}}WebFormatter.Instance;
                """);
            }

            sb.AppendLine("""
                }
            """);

            foreach (var type in providerType.TargetTypes)
            {
                sb.AppendLine($$"""

                    internal sealed class {{type.Name}}WebFormatter : IWebSerializer<{{type.Name}}>
                    {
                        public static IWebSerializer<{{type.Name}}> Instance { get; } = new {{type.Name}}WebFormatter();

                        public void Serialize(ref WebSerializerWriter writer, {{type.Name}} value, WebSerializerOptions options)
                        {
                """);

                if (type.Prefix is string prefix)
                {
                    // FIXME: Double encode
                    sb.Append(/* lang=c#-test */ $$"""
                            var originalNamePrefix = writer.NamePrefix;
                            if (writer.NamePrefix == null)
                            {
                                writer.NamePrefix = "{{prefix}}";
                            }
                            else
                            {
                                writer.NamePrefix = originalNamePrefix + "{{prefix}}";
                            }

                            """);
                }

                int i = 0;
                foreach (var member in type.Members)
                {
                    if (member.IsNullable)
                    {
                        sb.Append(/* lang=c#-test */ $$"""
                            if (value.{{member.MemberName}} is not null)
                            {

                            """);
                    }

                    if (0 < i)
                    {
                        sb.Append(/* lang=c#-test */ """
                                        writer.AppendConcatenate();

                            """);
                    }

                    sb.Append($$"""
                                    writer.AppendNamePrefix();
                                    writer.AppendRaw("{{UrlEncoder.Default.Encode(member.SerializedName)}}=");

                        """);
                    if (member.WebSerializer is null)
                    {
                        sb.Append($$"""
                                    options.GetRequiredSerializer<{{member.Type}}>().Serialize(ref writer, value.{{member.MemberName}}, options);

                        """);
                    }
                    else
                    {
                        sb.Append($$"""
                                    new {{member.WebSerializer}}().Serialize(ref writer, value.{{member.MemberName}}, options);

                        """);
                    }

                    if (member.IsNullable)
                    {
                        sb.Append(/* lang=c#-test */ """
                            }

                            """);
                    }

                    i++;
                }
                sb.AppendLine("""
                            }
                        }
                    """);
            }

            sb.AppendLine("""
                }
                """);

            foreach (var _ in providerType.Parents)
            {
                sb.AppendLine($$"""
                    }
                    """);
            }

            var fullType = providerType.FullyQualifiedName
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");
            context.AddSource($"{fullType}.g.cs", sb.ToString());
        });
    }
}
